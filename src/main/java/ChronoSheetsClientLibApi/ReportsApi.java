/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiCallback;
import ChronoSheetsClient.ApiClient;
import ChronoSheetsClient.ApiException;
import ChronoSheetsClient.ApiResponse;
import ChronoSheetsClient.Configuration;
import ChronoSheetsClient.Pair;
import ChronoSheetsClient.ProgressRequestBody;
import ChronoSheetsClient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ChronoSheetsClientLibModel.CSApiResponseCombinedReportsData;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListOrgReportTranscript;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListOrgReportTrip;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListRawReportItem;
import ChronoSheetsClientLibModel.CSApiResponseListFleetSummaryReportItem;
import ChronoSheetsClientLibModel.CSApiResponseListJobSeriesReportItem;
import ChronoSheetsClientLibModel.CSApiResponseListProjectCostingReportItem;
import ChronoSheetsClientLibModel.CSApiResponseTrip;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient apiClient;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for reportsGetAllChartsDataAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetAllChartsDataAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetAllChartsDataAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));
        if (forceOnlyThisChart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ForceOnlyThisChart", forceOnlyThisChart));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetAllChartsDataAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetAllChartsDataAdminCall(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @return CSApiResponseCombinedReportsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseCombinedReportsData reportsGetAllChartsDataAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart) throws ApiException {
        ApiResponse<CSApiResponseCombinedReportsData> resp = reportsGetAllChartsDataAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart);
        return resp.getData();
    }

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @return ApiResponse&lt;CSApiResponseCombinedReportsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseCombinedReportsData> reportsGetAllChartsDataAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetAllChartsDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseCombinedReportsData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetAllChartsDataAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart, final ApiCallback<CSApiResponseCombinedReportsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetAllChartsDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseCombinedReportsData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetAllChartsDataUser
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetAllChartsDataUserCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetAllChartsDataUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetAllChartsDataUserValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetAllChartsDataUserCall(startDate, endDate, xChronosheetsAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return CSApiResponseCombinedReportsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseCombinedReportsData reportsGetAllChartsDataUser(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        ApiResponse<CSApiResponseCombinedReportsData> resp = reportsGetAllChartsDataUserWithHttpInfo(startDate, endDate, xChronosheetsAuth);
        return resp.getData();
    }

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponse&lt;CSApiResponseCombinedReportsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseCombinedReportsData> reportsGetAllChartsDataUserWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetAllChartsDataUserValidateBeforeCall(startDate, endDate, xChronosheetsAuth, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseCombinedReportsData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetAllChartsDataUserAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback<CSApiResponseCombinedReportsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetAllChartsDataUserValidateBeforeCall(startDate, endDate, xChronosheetsAuth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseCombinedReportsData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetFleetSummaryAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetFleetSummaryAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetFleetSummaryAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetFleetSummaryAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetFleetSummaryAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetFleetSummaryAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetFleetSummaryAdmin(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetFleetSummaryAdminCall(startDate, endDate, xChronosheetsAuth, userIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return CSApiResponseListFleetSummaryReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseListFleetSummaryReportItem reportsGetFleetSummaryAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        ApiResponse<CSApiResponseListFleetSummaryReportItem> resp = reportsGetFleetSummaryAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
        return resp.getData();
    }

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;CSApiResponseListFleetSummaryReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseListFleetSummaryReportItem> reportsGetFleetSummaryAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetFleetSummaryAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseListFleetSummaryReportItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetFleetSummaryAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback<CSApiResponseListFleetSummaryReportItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetFleetSummaryAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseListFleetSummaryReportItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetOrgTripById
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrgTripByIdCall(Integer tripId, String xChronosheetsAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetOrgTripById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tripId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TripId", tripId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetOrgTripByIdValidateBeforeCall(Integer tripId, String xChronosheetsAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling reportsGetOrgTripById(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetOrgTripByIdCall(tripId, xChronosheetsAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return CSApiResponseTrip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseTrip reportsGetOrgTripById(Integer tripId, String xChronosheetsAuth) throws ApiException {
        ApiResponse<CSApiResponseTrip> resp = reportsGetOrgTripByIdWithHttpInfo(tripId, xChronosheetsAuth);
        return resp.getData();
    }

    /**
     * Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponse&lt;CSApiResponseTrip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseTrip> reportsGetOrgTripByIdWithHttpInfo(Integer tripId, String xChronosheetsAuth) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetOrgTripByIdValidateBeforeCall(tripId, xChronosheetsAuth, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseTrip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrgTripByIdAsync(Integer tripId, String xChronosheetsAuth, final ApiCallback<CSApiResponseTrip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetOrgTripByIdValidateBeforeCall(tripId, xChronosheetsAuth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseTrip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetOrganisationTimesheetFileAttachments
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrganisationTimesheetFileAttachmentsCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetOrganisationTimesheetFileAttachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Take", take));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetOrganisationTimesheetFileAttachmentsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetOrganisationTimesheetFileAttachmentsCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment reportsGetOrganisationTimesheetFileAttachments(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        ApiResponse<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment> resp = reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
        return resp.getData();
    }

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment> reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetOrganisationTimesheetFileAttachmentsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrganisationTimesheetFileAttachmentsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetOrganisationTimesheetFileAttachmentsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetOrganisationTranscripts
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrganisationTranscriptsCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetOrganisationTranscripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Take", take));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Keywords", keywords));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetOrganisationTranscriptsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetOrganisationTranscripts(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetOrganisationTranscripts(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTranscripts(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetOrganisationTranscriptsCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @return CSApiResponseForPaginatedListOrgReportTranscript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseForPaginatedListOrgReportTranscript reportsGetOrganisationTranscripts(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords) throws ApiException {
        ApiResponse<CSApiResponseForPaginatedListOrgReportTranscript> resp = reportsGetOrganisationTranscriptsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords);
        return resp.getData();
    }

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @return ApiResponse&lt;CSApiResponseForPaginatedListOrgReportTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseForPaginatedListOrgReportTranscript> reportsGetOrganisationTranscriptsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetOrganisationTranscriptsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListOrgReportTranscript>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrganisationTranscriptsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords, final ApiCallback<CSApiResponseForPaginatedListOrgReportTranscript> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetOrganisationTranscriptsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListOrgReportTranscript>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetOrganisationTrips
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrganisationTripsCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetOrganisationTrips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Take", take));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetOrganisationTripsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetOrganisationTripsCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return CSApiResponseForPaginatedListOrgReportTrip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseForPaginatedListOrgReportTrip reportsGetOrganisationTrips(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        ApiResponse<CSApiResponseForPaginatedListOrgReportTrip> resp = reportsGetOrganisationTripsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
        return resp.getData();
    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;CSApiResponseForPaginatedListOrgReportTrip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseForPaginatedListOrgReportTrip> reportsGetOrganisationTripsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetOrganisationTripsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListOrgReportTrip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetOrganisationTripsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback<CSApiResponseForPaginatedListOrgReportTrip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetOrganisationTripsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListOrgReportTrip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsGetRawDataAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsGetRawDataAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/GetRawDataAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsGetRawDataAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsGetRawDataAdminCall(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @return CSApiResponseForPaginatedListRawReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseForPaginatedListRawReportItem reportsGetRawDataAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take) throws ApiException {
        ApiResponse<CSApiResponseForPaginatedListRawReportItem> resp = reportsGetRawDataAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take);
        return resp.getData();
    }

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @return ApiResponse&lt;CSApiResponseForPaginatedListRawReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseForPaginatedListRawReportItem> reportsGetRawDataAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take) throws ApiException {
        com.squareup.okhttp.Call call = reportsGetRawDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListRawReportItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsGetRawDataAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take, final ApiCallback<CSApiResponseForPaginatedListRawReportItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsGetRawDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseForPaginatedListRawReportItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsProjectCostingsAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsProjectCostingsAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/ProjectCostingsAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserIds", userIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsProjectCostingsAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsProjectCostingsAdminCall(startDate, endDate, xChronosheetsAuth, userIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return CSApiResponseListProjectCostingReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseListProjectCostingReportItem reportsProjectCostingsAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        ApiResponse<CSApiResponseListProjectCostingReportItem> resp = reportsProjectCostingsAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
        return resp.getData();
    }

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;CSApiResponseListProjectCostingReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseListProjectCostingReportItem> reportsProjectCostingsAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        com.squareup.okhttp.Call call = reportsProjectCostingsAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseListProjectCostingReportItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsProjectCostingsAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback<CSApiResponseListProjectCostingReportItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsProjectCostingsAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseListProjectCostingReportItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportsUserJobsOverTime
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportsUserJobsOverTimeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Reports/UserJobsOverTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StartDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null)
        localVarHeaderParams.put("x-chronosheets-auth", apiClient.parameterToString(xChronosheetsAuth));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportsUserJobsOverTimeValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsUserJobsOverTime(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsUserJobsOverTime(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime(Async)");
        }
        

        com.squareup.okhttp.Call call = reportsUserJobsOverTimeCall(startDate, endDate, xChronosheetsAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return CSApiResponseListJobSeriesReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CSApiResponseListJobSeriesReportItem reportsUserJobsOverTime(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        ApiResponse<CSApiResponseListJobSeriesReportItem> resp = reportsUserJobsOverTimeWithHttpInfo(startDate, endDate, xChronosheetsAuth);
        return resp.getData();
    }

    /**
     * Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponse&lt;CSApiResponseListJobSeriesReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CSApiResponseListJobSeriesReportItem> reportsUserJobsOverTimeWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        com.squareup.okhttp.Call call = reportsUserJobsOverTimeValidateBeforeCall(startDate, endDate, xChronosheetsAuth, null, null);
        Type localVarReturnType = new TypeToken<CSApiResponseListJobSeriesReportItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsUserJobsOverTimeAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback<CSApiResponseListJobSeriesReportItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsUserJobsOverTimeValidateBeforeCall(startDate, endDate, xChronosheetsAuth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CSApiResponseListJobSeriesReportItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

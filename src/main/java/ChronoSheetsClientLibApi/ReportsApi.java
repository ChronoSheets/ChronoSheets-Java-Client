/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiCallback;
import ChronoSheetsClient.ApiClient;
import ChronoSheetsClient.ApiException;
import ChronoSheetsClient.ApiResponse;
import ChronoSheetsClient.Configuration;
import ChronoSheetsClient.Pair;
import ChronoSheetsClient.ProgressRequestBody;
import ChronoSheetsClient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ChronoSheetsClientLibModel.ApiResponseCombinedReportsData;
import ChronoSheetsClientLibModel.ApiResponseForPaginatedListOrgReportTimesheetFileAttachment;
import ChronoSheetsClientLibModel.ApiResponseForPaginatedListOrgReportTranscript;
import ChronoSheetsClientLibModel.ApiResponseForPaginatedListOrgReportTrip;
import ChronoSheetsClientLibModel.ApiResponseForPaginatedListRawReportItem;
import ChronoSheetsClientLibModel.ApiResponseListFleetSummaryReportItem;
import ChronoSheetsClientLibModel.ApiResponseListJobSeriesReportItem;
import ChronoSheetsClientLibModel.ApiResponseListProjectCostingReportItem;
import ChronoSheetsClientLibModel.ApiResponseTrip;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for reportsGetAllChartsDataAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetAllChartsDataAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetAllChartsDataAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        if (forceOnlyThisChart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceOnlyThisChart", forceOnlyThisChart));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetAllChartsDataAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetAllChartsDataAdminCall(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart, _callback);
        return localVarCall;

    }

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @return ApiResponseCombinedReportsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseCombinedReportsData reportsGetAllChartsDataAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart) throws ApiException {
        ApiResponse<ApiResponseCombinedReportsData> localVarResp = reportsGetAllChartsDataAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart);
        return localVarResp.getData();
    }

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @return ApiResponse&lt;ApiResponseCombinedReportsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseCombinedReportsData> reportsGetAllChartsDataAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart) throws ApiException {
        okhttp3.Call localVarCall = reportsGetAllChartsDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart, null);
        Type localVarReturnType = new TypeToken<ApiResponseCombinedReportsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetAllChartsDataAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String forceOnlyThisChart, final ApiCallback<ApiResponseCombinedReportsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetAllChartsDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseCombinedReportsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetAllChartsDataUser
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetAllChartsDataUserCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetAllChartsDataUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetAllChartsDataUserValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetAllChartsDataUserCall(startDate, endDate, xChronosheetsAuth, _callback);
        return localVarCall;

    }

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponseCombinedReportsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseCombinedReportsData reportsGetAllChartsDataUser(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        ApiResponse<ApiResponseCombinedReportsData> localVarResp = reportsGetAllChartsDataUserWithHttpInfo(startDate, endDate, xChronosheetsAuth);
        return localVarResp.getData();
    }

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponse&lt;ApiResponseCombinedReportsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseCombinedReportsData> reportsGetAllChartsDataUserWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        okhttp3.Call localVarCall = reportsGetAllChartsDataUserValidateBeforeCall(startDate, endDate, xChronosheetsAuth, null);
        Type localVarReturnType = new TypeToken<ApiResponseCombinedReportsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetAllChartsDataUserAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback<ApiResponseCombinedReportsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetAllChartsDataUserValidateBeforeCall(startDate, endDate, xChronosheetsAuth, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseCombinedReportsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetFleetSummaryAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetFleetSummaryAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetFleetSummaryAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetFleetSummaryAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetFleetSummaryAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetFleetSummaryAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetFleetSummaryAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetFleetSummaryAdminCall(startDate, endDate, xChronosheetsAuth, userIds, _callback);
        return localVarCall;

    }

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponseListFleetSummaryReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseListFleetSummaryReportItem reportsGetFleetSummaryAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        ApiResponse<ApiResponseListFleetSummaryReportItem> localVarResp = reportsGetFleetSummaryAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
        return localVarResp.getData();
    }

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;ApiResponseListFleetSummaryReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseListFleetSummaryReportItem> reportsGetFleetSummaryAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        okhttp3.Call localVarCall = reportsGetFleetSummaryAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, null);
        Type localVarReturnType = new TypeToken<ApiResponseListFleetSummaryReportItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetFleetSummaryAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback<ApiResponseListFleetSummaryReportItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetFleetSummaryAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseListFleetSummaryReportItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetOrgTripById
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrgTripByIdCall(Integer tripId, String xChronosheetsAuth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetOrgTripById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tripId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TripId", tripId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetOrgTripByIdValidateBeforeCall(Integer tripId, String xChronosheetsAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling reportsGetOrgTripById(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetOrgTripByIdCall(tripId, xChronosheetsAuth, _callback);
        return localVarCall;

    }

    /**
     * Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponseTrip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseTrip reportsGetOrgTripById(Integer tripId, String xChronosheetsAuth) throws ApiException {
        ApiResponse<ApiResponseTrip> localVarResp = reportsGetOrgTripByIdWithHttpInfo(tripId, xChronosheetsAuth);
        return localVarResp.getData();
    }

    /**
     * Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponse&lt;ApiResponseTrip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseTrip> reportsGetOrgTripByIdWithHttpInfo(Integer tripId, String xChronosheetsAuth) throws ApiException {
        okhttp3.Call localVarCall = reportsGetOrgTripByIdValidateBeforeCall(tripId, xChronosheetsAuth, null);
        Type localVarReturnType = new TypeToken<ApiResponseTrip>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param tripId The ID of the Trip you want to get (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrgTripByIdAsync(Integer tripId, String xChronosheetsAuth, final ApiCallback<ApiResponseTrip> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetOrgTripByIdValidateBeforeCall(tripId, xChronosheetsAuth, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseTrip>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetOrganisationTimesheetFileAttachments
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrganisationTimesheetFileAttachmentsCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetOrganisationTimesheetFileAttachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetOrganisationTimesheetFileAttachmentsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetOrganisationTimesheetFileAttachmentsCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, _callback);
        return localVarCall;

    }

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponseForPaginatedListOrgReportTimesheetFileAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseForPaginatedListOrgReportTimesheetFileAttachment reportsGetOrganisationTimesheetFileAttachments(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> localVarResp = reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
        return localVarResp.getData();
    }

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;ApiResponseForPaginatedListOrgReportTimesheetFileAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        okhttp3.Call localVarCall = reportsGetOrganisationTimesheetFileAttachmentsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, null);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrganisationTimesheetFileAttachmentsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetOrganisationTimesheetFileAttachmentsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetOrganisationTranscripts
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrganisationTranscriptsCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetOrganisationTranscripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Keywords", keywords));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetOrganisationTranscriptsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetOrganisationTranscripts(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetOrganisationTranscripts(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTranscripts(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetOrganisationTranscriptsCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords, _callback);
        return localVarCall;

    }

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @return ApiResponseForPaginatedListOrgReportTranscript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseForPaginatedListOrgReportTranscript reportsGetOrganisationTranscripts(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords) throws ApiException {
        ApiResponse<ApiResponseForPaginatedListOrgReportTranscript> localVarResp = reportsGetOrganisationTranscriptsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords);
        return localVarResp.getData();
    }

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @return ApiResponse&lt;ApiResponseForPaginatedListOrgReportTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseForPaginatedListOrgReportTranscript> reportsGetOrganisationTranscriptsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords) throws ApiException {
        okhttp3.Call localVarCall = reportsGetOrganisationTranscriptsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords, null);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListOrgReportTranscript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param keywords Search the transcripts by keyword(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrganisationTranscriptsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, String keywords, final ApiCallback<ApiResponseForPaginatedListOrgReportTranscript> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetOrganisationTranscriptsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListOrgReportTranscript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetOrganisationTrips
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrganisationTripsCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetOrganisationTrips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetOrganisationTripsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetOrganisationTripsCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, _callback);
        return localVarCall;

    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponseForPaginatedListOrgReportTrip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseForPaginatedListOrgReportTrip reportsGetOrganisationTrips(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        ApiResponse<ApiResponseForPaginatedListOrgReportTrip> localVarResp = reportsGetOrganisationTripsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
        return localVarResp.getData();
    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;ApiResponseForPaginatedListOrgReportTrip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseForPaginatedListOrgReportTrip> reportsGetOrganisationTripsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds) throws ApiException {
        okhttp3.Call localVarCall = reportsGetOrganisationTripsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, null);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListOrgReportTrip>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param skip Skip this many items (optional)
     * @param take Take this many items (optional)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetOrganisationTripsAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, Integer skip, Integer take, String userIds, final ApiCallback<ApiResponseForPaginatedListOrgReportTrip> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetOrganisationTripsValidateBeforeCall(startDate, endDate, xChronosheetsAuth, skip, take, userIds, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListOrgReportTrip>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGetRawDataAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetRawDataAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/GetRawDataAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Order", order));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetRawDataAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = reportsGetRawDataAdminCall(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take, _callback);
        return localVarCall;

    }

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @return ApiResponseForPaginatedListRawReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseForPaginatedListRawReportItem reportsGetRawDataAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take) throws ApiException {
        ApiResponse<ApiResponseForPaginatedListRawReportItem> localVarResp = reportsGetRawDataAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take);
        return localVarResp.getData();
    }

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @return ApiResponse&lt;ApiResponseForPaginatedListRawReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseForPaginatedListRawReportItem> reportsGetRawDataAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = reportsGetRawDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take, null);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListRawReportItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param sort Decide which column to sort on (optional)
     * @param order Decide which direction to sort the column (optional)
     * @param skip Skip this many rows (optional)
     * @param take Take this many rows (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetRawDataAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, String sort, String order, Integer skip, Integer take, final ApiCallback<ApiResponseForPaginatedListRawReportItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetRawDataAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseForPaginatedListRawReportItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsProjectCostingsAdmin
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsProjectCostingsAdminCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/ProjectCostingsAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserIds", userIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsProjectCostingsAdminValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = reportsProjectCostingsAdminCall(startDate, endDate, xChronosheetsAuth, userIds, _callback);
        return localVarCall;

    }

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponseListProjectCostingReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseListProjectCostingReportItem reportsProjectCostingsAdmin(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        ApiResponse<ApiResponseListProjectCostingReportItem> localVarResp = reportsProjectCostingsAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
        return localVarResp.getData();
    }

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @return ApiResponse&lt;ApiResponseListProjectCostingReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseListProjectCostingReportItem> reportsProjectCostingsAdminWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds) throws ApiException {
        okhttp3.Call localVarCall = reportsProjectCostingsAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, null);
        Type localVarReturnType = new TypeToken<ApiResponseListProjectCostingReportItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsProjectCostingsAdminAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, String userIds, final ApiCallback<ApiResponseListProjectCostingReportItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsProjectCostingsAdminValidateBeforeCall(startDate, endDate, xChronosheetsAuth, userIds, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseListProjectCostingReportItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsUserJobsOverTime
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUserJobsOverTimeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/UserJobsOverTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChronosheetsAuth != null) {
            localVarHeaderParams.put("x-chronosheets-auth", localVarApiClient.parameterToString(xChronosheetsAuth));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsUserJobsOverTimeValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportsUserJobsOverTime(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling reportsUserJobsOverTime(Async)");
        }
        
        // verify the required parameter 'xChronosheetsAuth' is set
        if (xChronosheetsAuth == null) {
            throw new ApiException("Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime(Async)");
        }
        

        okhttp3.Call localVarCall = reportsUserJobsOverTimeCall(startDate, endDate, xChronosheetsAuth, _callback);
        return localVarCall;

    }

    /**
     * Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponseListJobSeriesReportItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseListJobSeriesReportItem reportsUserJobsOverTime(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        ApiResponse<ApiResponseListJobSeriesReportItem> localVarResp = reportsUserJobsOverTimeWithHttpInfo(startDate, endDate, xChronosheetsAuth);
        return localVarResp.getData();
    }

    /**
     * Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @return ApiResponse&lt;ApiResponseListJobSeriesReportItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseListJobSeriesReportItem> reportsUserJobsOverTimeWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth) throws ApiException {
        okhttp3.Call localVarCall = reportsUserJobsOverTimeValidateBeforeCall(startDate, endDate, xChronosheetsAuth, null);
        Type localVarReturnType = new TypeToken<ApiResponseListJobSeriesReportItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;. (asynchronously)
     * 
     * @param startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsUserJobsOverTimeAsync(OffsetDateTime startDate, OffsetDateTime endDate, String xChronosheetsAuth, final ApiCallback<ApiResponseListJobSeriesReportItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsUserJobsOverTimeValidateBeforeCall(startDate, endDate, xChronosheetsAuth, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseListJobSeriesReportItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

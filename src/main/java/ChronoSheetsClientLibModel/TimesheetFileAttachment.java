/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ChronoSheetsClientLibModel;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * A file attachment attached to a timesheet
 */
@ApiModel(description = "A file attachment attached to a timesheet")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-25T22:43:31.260+11:00[Australia/Sydney]")
public class TimesheetFileAttachment {
  public static final String SERIALIZED_NAME_TIMESHEET_ID = "TimesheetId";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_ID)
  private Integer timesheetId;

  public static final String SERIALIZED_NAME_DOCUMENT_S3_SIGNED_URL = "DocumentS3SignedUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_S3_SIGNED_URL)
  private String documentS3SignedUrl;

  public static final String SERIALIZED_NAME_IMAGE_LARGE_S3_SIGNED_URL = "ImageLargeS3SignedUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_LARGE_S3_SIGNED_URL)
  private String imageLargeS3SignedUrl;

  public static final String SERIALIZED_NAME_IMAGE_MEDIUM_S3_SIGNED_URL = "ImageMediumS3SignedUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_MEDIUM_S3_SIGNED_URL)
  private String imageMediumS3SignedUrl;

  public static final String SERIALIZED_NAME_IMAGE_SMALL_S3_SIGNED_URL = "ImageSmallS3SignedUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_SMALL_S3_SIGNED_URL)
  private String imageSmallS3SignedUrl;

  public static final String SERIALIZED_NAME_TIMESHEET_START = "TimesheetStart";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_START)
  private OffsetDateTime timesheetStart;

  public static final String SERIALIZED_NAME_TIMESHEET_END = "TimesheetEnd";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_END)
  private OffsetDateTime timesheetEnd;

  public static final String SERIALIZED_NAME_FILE_ATTACHMENT_ID = "FileAttachmentId";
  @SerializedName(SERIALIZED_NAME_FILE_ATTACHMENT_ID)
  private Integer fileAttachmentId;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_ORG_ID = "OrgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private Integer orgId;

  /**
   * The mobile platform that was used to attach the file
   */
  @JsonAdapter(MobilePlatformEnum.Adapter.class)
  public enum MobilePlatformEnum {
    UNKNOWN("Unknown"),
    
    IOS("iOS"),
    
    ANDROID("Android");

    private String value;

    MobilePlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobilePlatformEnum fromValue(String value) {
      for (MobilePlatformEnum b : MobilePlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobilePlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobilePlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobilePlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobilePlatformEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MOBILE_PLATFORM = "MobilePlatform";
  @SerializedName(SERIALIZED_NAME_MOBILE_PLATFORM)
  private MobilePlatformEnum mobilePlatform;

  /**
   * The type of file attachment
   */
  @JsonAdapter(AttachmentTypeEnum.Adapter.class)
  public enum AttachmentTypeEnum {
    IMAGE("Image"),
    
    WORDDOC("WordDoc"),
    
    PDF("Pdf"),
    
    MSSPREADSHEET("MSSpreadSheet"),
    
    MSPOWERPOINT("MSPowerPoint"),
    
    RICHTEXTFORMAT("RichTextFormat"),
    
    ZIPFILE("ZipFile"),
    
    OTHER("Other"),
    
    AUDIO("Audio");

    private String value;

    AttachmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttachmentTypeEnum fromValue(String value) {
      for (AttachmentTypeEnum b : AttachmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttachmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttachmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttachmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttachmentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ATTACHMENT_TYPE = "AttachmentType";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_TYPE)
  private AttachmentTypeEnum attachmentType;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NON_IMAGE_FILE_PATH = "NonImageFilePath";
  @SerializedName(SERIALIZED_NAME_NON_IMAGE_FILE_PATH)
  private String nonImageFilePath;

  public static final String SERIALIZED_NAME_IMAGE_LARGE_FILE_PATH = "ImageLargeFilePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_LARGE_FILE_PATH)
  private String imageLargeFilePath;

  public static final String SERIALIZED_NAME_IMAGE_MEDIUM_FILE_PATH = "ImageMediumFilePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_MEDIUM_FILE_PATH)
  private String imageMediumFilePath;

  public static final String SERIALIZED_NAME_IMAGE_SMALL_FILE_PATH = "ImageSmallFilePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_SMALL_FILE_PATH)
  private String imageSmallFilePath;

  public static final String SERIALIZED_NAME_ORIGINAL_FILE_NAME = "OriginalFileName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILE_NAME)
  private String originalFileName;

  public static final String SERIALIZED_NAME_LATITUDE = "Latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_DATE_UPLOADED = "DateUploaded";
  @SerializedName(SERIALIZED_NAME_DATE_UPLOADED)
  private OffsetDateTime dateUploaded;

  public static final String SERIALIZED_NAME_DATE_IMAGE_CAPTURED = "DateImageCaptured";
  @SerializedName(SERIALIZED_NAME_DATE_IMAGE_CAPTURED)
  private OffsetDateTime dateImageCaptured;

  public static final String SERIALIZED_NAME_STORAGE_ALLOCATION_BYTES = "StorageAllocationBytes";
  @SerializedName(SERIALIZED_NAME_STORAGE_ALLOCATION_BYTES)
  private Long storageAllocationBytes;

  public static final String SERIALIZED_NAME_AUDIO_DURATION_SECONDS = "AudioDurationSeconds";
  @SerializedName(SERIALIZED_NAME_AUDIO_DURATION_SECONDS)
  private Integer audioDurationSeconds;


  public TimesheetFileAttachment timesheetId(Integer timesheetId) {
    
    this.timesheetId = timesheetId;
    return this;
  }

   /**
   * The ID of the timesheet this attachment is attached to.
   * @return timesheetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the timesheet this attachment is attached to.")

  public Integer getTimesheetId() {
    return timesheetId;
  }


  public void setTimesheetId(Integer timesheetId) {
    this.timesheetId = timesheetId;
  }


  public TimesheetFileAttachment documentS3SignedUrl(String documentS3SignedUrl) {
    
    this.documentS3SignedUrl = documentS3SignedUrl;
    return this;
  }

   /**
   * The limited use signed URL for the document (if it&#39;s not an image).  This URL is unique and will eventually expire.  If the attachment is an image, then this won&#39;t be set.
   * @return documentS3SignedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The limited use signed URL for the document (if it's not an image).  This URL is unique and will eventually expire.  If the attachment is an image, then this won't be set.")

  public String getDocumentS3SignedUrl() {
    return documentS3SignedUrl;
  }


  public void setDocumentS3SignedUrl(String documentS3SignedUrl) {
    this.documentS3SignedUrl = documentS3SignedUrl;
  }


  public TimesheetFileAttachment imageLargeS3SignedUrl(String imageLargeS3SignedUrl) {
    
    this.imageLargeS3SignedUrl = imageLargeS3SignedUrl;
    return this;
  }

   /**
   * The limited use signed URL for the large version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
   * @return imageLargeS3SignedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The limited use signed URL for the large version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.")

  public String getImageLargeS3SignedUrl() {
    return imageLargeS3SignedUrl;
  }


  public void setImageLargeS3SignedUrl(String imageLargeS3SignedUrl) {
    this.imageLargeS3SignedUrl = imageLargeS3SignedUrl;
  }


  public TimesheetFileAttachment imageMediumS3SignedUrl(String imageMediumS3SignedUrl) {
    
    this.imageMediumS3SignedUrl = imageMediumS3SignedUrl;
    return this;
  }

   /**
   * The limited use signed URL for the medium version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
   * @return imageMediumS3SignedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The limited use signed URL for the medium version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.")

  public String getImageMediumS3SignedUrl() {
    return imageMediumS3SignedUrl;
  }


  public void setImageMediumS3SignedUrl(String imageMediumS3SignedUrl) {
    this.imageMediumS3SignedUrl = imageMediumS3SignedUrl;
  }


  public TimesheetFileAttachment imageSmallS3SignedUrl(String imageSmallS3SignedUrl) {
    
    this.imageSmallS3SignedUrl = imageSmallS3SignedUrl;
    return this;
  }

   /**
   * The limited use signed URL for the small version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
   * @return imageSmallS3SignedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The limited use signed URL for the small version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.")

  public String getImageSmallS3SignedUrl() {
    return imageSmallS3SignedUrl;
  }


  public void setImageSmallS3SignedUrl(String imageSmallS3SignedUrl) {
    this.imageSmallS3SignedUrl = imageSmallS3SignedUrl;
  }


  public TimesheetFileAttachment timesheetStart(OffsetDateTime timesheetStart) {
    
    this.timesheetStart = timesheetStart;
    return this;
  }

   /**
   * The start date and time of the timesheet that this attachment is attached to
   * @return timesheetStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The start date and time of the timesheet that this attachment is attached to")

  public OffsetDateTime getTimesheetStart() {
    return timesheetStart;
  }


  public void setTimesheetStart(OffsetDateTime timesheetStart) {
    this.timesheetStart = timesheetStart;
  }


  public TimesheetFileAttachment timesheetEnd(OffsetDateTime timesheetEnd) {
    
    this.timesheetEnd = timesheetEnd;
    return this;
  }

   /**
   * The end date and time of the timesheet that this attachment is attached to
   * @return timesheetEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The end date and time of the timesheet that this attachment is attached to")

  public OffsetDateTime getTimesheetEnd() {
    return timesheetEnd;
  }


  public void setTimesheetEnd(OffsetDateTime timesheetEnd) {
    this.timesheetEnd = timesheetEnd;
  }


  public TimesheetFileAttachment fileAttachmentId(Integer fileAttachmentId) {
    
    this.fileAttachmentId = fileAttachmentId;
    return this;
  }

   /**
   * The ID of the file attachment
   * @return fileAttachmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the file attachment")

  public Integer getFileAttachmentId() {
    return fileAttachmentId;
  }


  public void setFileAttachmentId(Integer fileAttachmentId) {
    this.fileAttachmentId = fileAttachmentId;
  }


  public TimesheetFileAttachment userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The ID of the user who attached the file
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the user who attached the file")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public TimesheetFileAttachment orgId(Integer orgId) {
    
    this.orgId = orgId;
    return this;
  }

   /**
   * The ID of the organisation that owns the file and employs the employee
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the organisation that owns the file and employs the employee")

  public Integer getOrgId() {
    return orgId;
  }


  public void setOrgId(Integer orgId) {
    this.orgId = orgId;
  }


  public TimesheetFileAttachment mobilePlatform(MobilePlatformEnum mobilePlatform) {
    
    this.mobilePlatform = mobilePlatform;
    return this;
  }

   /**
   * The mobile platform that was used to attach the file
   * @return mobilePlatform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mobile platform that was used to attach the file")

  public MobilePlatformEnum getMobilePlatform() {
    return mobilePlatform;
  }


  public void setMobilePlatform(MobilePlatformEnum mobilePlatform) {
    this.mobilePlatform = mobilePlatform;
  }


  public TimesheetFileAttachment attachmentType(AttachmentTypeEnum attachmentType) {
    
    this.attachmentType = attachmentType;
    return this;
  }

   /**
   * The type of file attachment
   * @return attachmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of file attachment")

  public AttachmentTypeEnum getAttachmentType() {
    return attachmentType;
  }


  public void setAttachmentType(AttachmentTypeEnum attachmentType) {
    this.attachmentType = attachmentType;
  }


  public TimesheetFileAttachment notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Any notes regarding the file attachment
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any notes regarding the file attachment")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public TimesheetFileAttachment nonImageFilePath(String nonImageFilePath) {
    
    this.nonImageFilePath = nonImageFilePath;
    return this;
  }

   /**
   * The path to the file attachment as hosted by ChronoSheets storage, if it&#39;s not an image.  If the attachment is an image then this won&#39;t be set.
   * @return nonImageFilePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the file attachment as hosted by ChronoSheets storage, if it's not an image.  If the attachment is an image then this won't be set.")

  public String getNonImageFilePath() {
    return nonImageFilePath;
  }


  public void setNonImageFilePath(String nonImageFilePath) {
    this.nonImageFilePath = nonImageFilePath;
  }


  public TimesheetFileAttachment imageLargeFilePath(String imageLargeFilePath) {
    
    this.imageLargeFilePath = imageLargeFilePath;
    return this;
  }

   /**
   * The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the large version of the image.
   * @return imageLargeFilePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the file attachment as hosted by ChronoSheets storage, only set if it's an image.  This is regarding the large version of the image.")

  public String getImageLargeFilePath() {
    return imageLargeFilePath;
  }


  public void setImageLargeFilePath(String imageLargeFilePath) {
    this.imageLargeFilePath = imageLargeFilePath;
  }


  public TimesheetFileAttachment imageMediumFilePath(String imageMediumFilePath) {
    
    this.imageMediumFilePath = imageMediumFilePath;
    return this;
  }

   /**
   * The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the medium version of the image.
   * @return imageMediumFilePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the file attachment as hosted by ChronoSheets storage, only set if it's an image.  This is regarding the medium version of the image.")

  public String getImageMediumFilePath() {
    return imageMediumFilePath;
  }


  public void setImageMediumFilePath(String imageMediumFilePath) {
    this.imageMediumFilePath = imageMediumFilePath;
  }


  public TimesheetFileAttachment imageSmallFilePath(String imageSmallFilePath) {
    
    this.imageSmallFilePath = imageSmallFilePath;
    return this;
  }

   /**
   * The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the small version of the image.
   * @return imageSmallFilePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the file attachment as hosted by ChronoSheets storage, only set if it's an image.  This is regarding the small version of the image.")

  public String getImageSmallFilePath() {
    return imageSmallFilePath;
  }


  public void setImageSmallFilePath(String imageSmallFilePath) {
    this.imageSmallFilePath = imageSmallFilePath;
  }


  public TimesheetFileAttachment originalFileName(String originalFileName) {
    
    this.originalFileName = originalFileName;
    return this;
  }

   /**
   * The original file name of the attachment
   * @return originalFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original file name of the attachment")

  public String getOriginalFileName() {
    return originalFileName;
  }


  public void setOriginalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
  }


  public TimesheetFileAttachment latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Meta-data indicating the latitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.
   * @return latitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Meta-data indicating the latitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.")

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public TimesheetFileAttachment longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Meta-data indicating the longitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.
   * @return longitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Meta-data indicating the longitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.")

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public TimesheetFileAttachment dateUploaded(OffsetDateTime dateUploaded) {
    
    this.dateUploaded = dateUploaded;
    return this;
  }

   /**
   * The date and time the attachment was uploaded.  Time is in UTC.
   * @return dateUploaded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the attachment was uploaded.  Time is in UTC.")

  public OffsetDateTime getDateUploaded() {
    return dateUploaded;
  }


  public void setDateUploaded(OffsetDateTime dateUploaded) {
    this.dateUploaded = dateUploaded;
  }


  public TimesheetFileAttachment dateImageCaptured(OffsetDateTime dateImageCaptured) {
    
    this.dateImageCaptured = dateImageCaptured;
    return this;
  }

   /**
   * The original date and time the image was captured, if it was an image.  This data originates from the meta data inside the image file.
   * @return dateImageCaptured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original date and time the image was captured, if it was an image.  This data originates from the meta data inside the image file.")

  public OffsetDateTime getDateImageCaptured() {
    return dateImageCaptured;
  }


  public void setDateImageCaptured(OffsetDateTime dateImageCaptured) {
    this.dateImageCaptured = dateImageCaptured;
  }


  public TimesheetFileAttachment storageAllocationBytes(Long storageAllocationBytes) {
    
    this.storageAllocationBytes = storageAllocationBytes;
    return this;
  }

   /**
   * The number of bytes allocated for storing the file attachment.
   * @return storageAllocationBytes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of bytes allocated for storing the file attachment.")

  public Long getStorageAllocationBytes() {
    return storageAllocationBytes;
  }


  public void setStorageAllocationBytes(Long storageAllocationBytes) {
    this.storageAllocationBytes = storageAllocationBytes;
  }


  public TimesheetFileAttachment audioDurationSeconds(Integer audioDurationSeconds) {
    
    this.audioDurationSeconds = audioDurationSeconds;
    return this;
  }

   /**
   * If the attachment was an audio file, this field indicates the duration of the audio file in seconds.  This data originates from the meta data inside the audio file.
   * @return audioDurationSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the attachment was an audio file, this field indicates the duration of the audio file in seconds.  This data originates from the meta data inside the audio file.")

  public Integer getAudioDurationSeconds() {
    return audioDurationSeconds;
  }


  public void setAudioDurationSeconds(Integer audioDurationSeconds) {
    this.audioDurationSeconds = audioDurationSeconds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimesheetFileAttachment timesheetFileAttachment = (TimesheetFileAttachment) o;
    return Objects.equals(this.timesheetId, timesheetFileAttachment.timesheetId) &&
        Objects.equals(this.documentS3SignedUrl, timesheetFileAttachment.documentS3SignedUrl) &&
        Objects.equals(this.imageLargeS3SignedUrl, timesheetFileAttachment.imageLargeS3SignedUrl) &&
        Objects.equals(this.imageMediumS3SignedUrl, timesheetFileAttachment.imageMediumS3SignedUrl) &&
        Objects.equals(this.imageSmallS3SignedUrl, timesheetFileAttachment.imageSmallS3SignedUrl) &&
        Objects.equals(this.timesheetStart, timesheetFileAttachment.timesheetStart) &&
        Objects.equals(this.timesheetEnd, timesheetFileAttachment.timesheetEnd) &&
        Objects.equals(this.fileAttachmentId, timesheetFileAttachment.fileAttachmentId) &&
        Objects.equals(this.userId, timesheetFileAttachment.userId) &&
        Objects.equals(this.orgId, timesheetFileAttachment.orgId) &&
        Objects.equals(this.mobilePlatform, timesheetFileAttachment.mobilePlatform) &&
        Objects.equals(this.attachmentType, timesheetFileAttachment.attachmentType) &&
        Objects.equals(this.notes, timesheetFileAttachment.notes) &&
        Objects.equals(this.nonImageFilePath, timesheetFileAttachment.nonImageFilePath) &&
        Objects.equals(this.imageLargeFilePath, timesheetFileAttachment.imageLargeFilePath) &&
        Objects.equals(this.imageMediumFilePath, timesheetFileAttachment.imageMediumFilePath) &&
        Objects.equals(this.imageSmallFilePath, timesheetFileAttachment.imageSmallFilePath) &&
        Objects.equals(this.originalFileName, timesheetFileAttachment.originalFileName) &&
        Objects.equals(this.latitude, timesheetFileAttachment.latitude) &&
        Objects.equals(this.longitude, timesheetFileAttachment.longitude) &&
        Objects.equals(this.dateUploaded, timesheetFileAttachment.dateUploaded) &&
        Objects.equals(this.dateImageCaptured, timesheetFileAttachment.dateImageCaptured) &&
        Objects.equals(this.storageAllocationBytes, timesheetFileAttachment.storageAllocationBytes) &&
        Objects.equals(this.audioDurationSeconds, timesheetFileAttachment.audioDurationSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timesheetId, documentS3SignedUrl, imageLargeS3SignedUrl, imageMediumS3SignedUrl, imageSmallS3SignedUrl, timesheetStart, timesheetEnd, fileAttachmentId, userId, orgId, mobilePlatform, attachmentType, notes, nonImageFilePath, imageLargeFilePath, imageMediumFilePath, imageSmallFilePath, originalFileName, latitude, longitude, dateUploaded, dateImageCaptured, storageAllocationBytes, audioDurationSeconds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimesheetFileAttachment {\n");
    sb.append("    timesheetId: ").append(toIndentedString(timesheetId)).append("\n");
    sb.append("    documentS3SignedUrl: ").append(toIndentedString(documentS3SignedUrl)).append("\n");
    sb.append("    imageLargeS3SignedUrl: ").append(toIndentedString(imageLargeS3SignedUrl)).append("\n");
    sb.append("    imageMediumS3SignedUrl: ").append(toIndentedString(imageMediumS3SignedUrl)).append("\n");
    sb.append("    imageSmallS3SignedUrl: ").append(toIndentedString(imageSmallS3SignedUrl)).append("\n");
    sb.append("    timesheetStart: ").append(toIndentedString(timesheetStart)).append("\n");
    sb.append("    timesheetEnd: ").append(toIndentedString(timesheetEnd)).append("\n");
    sb.append("    fileAttachmentId: ").append(toIndentedString(fileAttachmentId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    mobilePlatform: ").append(toIndentedString(mobilePlatform)).append("\n");
    sb.append("    attachmentType: ").append(toIndentedString(attachmentType)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    nonImageFilePath: ").append(toIndentedString(nonImageFilePath)).append("\n");
    sb.append("    imageLargeFilePath: ").append(toIndentedString(imageLargeFilePath)).append("\n");
    sb.append("    imageMediumFilePath: ").append(toIndentedString(imageMediumFilePath)).append("\n");
    sb.append("    imageSmallFilePath: ").append(toIndentedString(imageSmallFilePath)).append("\n");
    sb.append("    originalFileName: ").append(toIndentedString(originalFileName)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    dateUploaded: ").append(toIndentedString(dateUploaded)).append("\n");
    sb.append("    dateImageCaptured: ").append(toIndentedString(dateImageCaptured)).append("\n");
    sb.append("    storageAllocationBytes: ").append(toIndentedString(storageAllocationBytes)).append("\n");
    sb.append("    audioDurationSeconds: ").append(toIndentedString(audioDurationSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


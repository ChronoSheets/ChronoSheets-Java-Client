/*
 * ChronoSheets API
 * An API for integrating into ChronoSheets timesheets
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiException;
import ChronoSheetsClientLibModel.CsApiApiResponseBoolean;
import ChronoSheetsClientLibModel.CsApiApiResponseInt32;
import ChronoSheetsClientLibModel.CsApiApiResponseListTimesheetTask;
import ChronoSheetsClientLibModel.CsApiApiResponseTimesheetTask;
import ChronoSheetsClientLibModel.CsApiInsertTaskRequest;
import ChronoSheetsClientLibModel.CsApiUpdateTaskRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Ignore
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    
    /**
     * Create a task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksCreateTaskTest() throws ApiException {
        CsApiInsertTaskRequest request = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseInt32 response = api.tasksCreateTask(request, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Delete a task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksDeleteTaskTest() throws ApiException {
        Integer taskId = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseBoolean response = api.tasksDeleteTask(taskId, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get a particular task by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksGetTaskByIdTest() throws ApiException {
        Integer taskId = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseTimesheetTask response = api.tasksGetTaskById(taskId, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get tasks in your organisation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksGetTasksTest() throws ApiException {
        String xChronosheetsAuth = null;
        CsApiApiResponseListTimesheetTask response = api.tasksGetTasks(xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get tasks for a particular job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksGetTasksForJobTest() throws ApiException {
        Integer jobId = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseListTimesheetTask response = api.tasksGetTasksForJob(jobId, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Update a task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksUpdateTaskTest() throws ApiException {
        CsApiUpdateTaskRequest request = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseBoolean response = api.tasksUpdateTask(request, xChronosheetsAuth);

        // TODO: test validations
    }
    
}

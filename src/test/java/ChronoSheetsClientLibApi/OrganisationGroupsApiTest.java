/*
 * ChronoSheets API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiException;
import ChronoSheetsClientLibModel.CsApiApiResponseBoolean;
import ChronoSheetsClientLibModel.CsApiApiResponseInt32;
import ChronoSheetsClientLibModel.CsApiApiResponseListOrganisationGroup;
import ChronoSheetsClientLibModel.CsApiApiResponseOrganisationGroup;
import ChronoSheetsClientLibModel.CsApiInsertOrganisationGroupRequest;
import ChronoSheetsClientLibModel.CsApiSaveOrganisationGroupRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganisationGroupsApi
 */
@Ignore
public class OrganisationGroupsApiTest {

    private final OrganisationGroupsApi api = new OrganisationGroupsApi();

    
    /**
     * Create an organisation group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void organisationGroupsCreateOrganisationGroupTest() throws ApiException {
        CsApiInsertOrganisationGroupRequest request = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseInt32 response = api.organisationGroupsCreateOrganisationGroup(request, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get a particular organisation group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void organisationGroupsGetOrganisationGroupTest() throws ApiException {
        Integer organisationGroupId = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseOrganisationGroup response = api.organisationGroupsGetOrganisationGroup(organisationGroupId, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get a collection of organisation groups that are under your organisation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void organisationGroupsGetOrganisationGroupsTest() throws ApiException {
        String xChronosheetsAuth = null;
        CsApiApiResponseListOrganisationGroup response = api.organisationGroupsGetOrganisationGroups(xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get org groups for a particular job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void organisationGroupsGetOrganisationGroupsForJobTest() throws ApiException {
        Integer jobId = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseListOrganisationGroup response = api.organisationGroupsGetOrganisationGroupsForJob(jobId, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Get org groups for a particular vehicle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void organisationGroupsGetOrganisationGroupsForVehicleTest() throws ApiException {
        Integer vehicleId = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseListOrganisationGroup response = api.organisationGroupsGetOrganisationGroupsForVehicle(vehicleId, xChronosheetsAuth);

        // TODO: test validations
    }
    
    /**
     * Update an organisation group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void organisationGroupsUpdateOrganisationGroupTest() throws ApiException {
        CsApiSaveOrganisationGroupRequest request = null;
        String xChronosheetsAuth = null;
        CsApiApiResponseBoolean response = api.organisationGroupsUpdateOrganisationGroup(request, xChronosheetsAuth);

        // TODO: test validations
    }
    
}
